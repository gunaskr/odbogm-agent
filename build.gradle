plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'net.researchgate.release' version '2.6.0'
    id 'nu.studer.credentials' version '1.0.0'
    id 'io.codearte.nexus-staging' version '0.11.0'
}


dependencies {
    compile 'org.ow2.asm:asm:6.0'
    compile 'com.ea.agentloader:ea-agent-loader:1.0.3'
    testImplementation 'junit:junit:[4,)'
}


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


println "***************************************************************"
println "SISTEMA: " + name
println "VERSION: " + version
println "JAVA   : " + System.getProperty('java.home')
println "***************************************************************"

// Para hace el deploy en Sonatype
// 1. Hacer el commit a github desde NB
// 2. Ejecutar: gradle release
// 3. ir a: https://oss.sonatype.org/#stagingRepositories
//    buscar el repositorio y hacer clic en "Close"
// 4. Una vez cerrado hacer click en "Release"



//Para guardar el usuario y contraseña en forma segura hacer:
//gradle addCredentials -PcredentialsKey=nexusUser -PcredentialsValue=XXXXX
//gradle addCredentials -PcredentialsKey=nexusPassword -PcredentialsValue=YYYYY
//o para hacerlo más seguro:
//gradle addCredentials -PcredentialsKey=nexusUser -PcredentialsValue=XXXXX -PcredentialsPassphrase=zzzzzzzz
//gradle addCredentials -PcredentialsKey=nexusPassword -PcredentialsValue=YYYYY -PcredentialsPassphrase=zzzzzzzz
//def nexusUser = credentials.nexusUser
//def nexusPassword = credentials.nexusPassword
def sonatypeUser = credentials.sonatypeUser
def sonatypePassword = credentials.sonatypePassword


// incrementar automáticamente el buildNumber
task autoBuildNumber {
    doFirst {
        File propertiesFile = new File('gradle.properties')
        def lines = propertiesFile.readLines()

        PrintWriter printWriter = new PrintWriter(propertiesFile)
        
        lines.each {String line ->
            if (line.startsWith("version") ){
                String versionNumber = line.tokenize("=")[1]
                String[] versionParts = versionNumber.tokenize(".")
                // recalcular el build 
                versionNumber = versionParts[0]+\
                                '.'+versionParts[1]+\
                                '.'+versionParts[2]+
                                '.'+( versionParts.length==4 ? (versionParts[3].toInteger()+1).toString():"1")
                
                line = "version="+versionNumber
                //                println line
            }
            printWriter.println(line)
        }
        printWriter.close()
    }
}

// agregar la dependencia solo si no se trata de un release
if (! project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release") ) {
    build.dependsOn autoBuildNumber
}
build.doLast {
    println "***************************************************************"
    println "SISTEMA: " + name
    println "VERSION: " + version
    println "JAVA   : " + System.getProperty('java.home')
    println "***************************************************************"
}


// seteo carpeta de fuentes para sonar
//sonarqube {
//    properties {
//        property "sonar.sources", "src/main"
//    }
//}

// desactivo la generación de javadoc en los proyectos que tengan la tarea
javadoc.enabled = true

repositories {
    //    maven {
    //        url "$sonatypeURLRelease"
    //            
    //        credentials {
    //            username = "$sonatypeUser"
    //            password = "$sonatypePassword"
    //        }
    //    }
    mavenLocal()
    mavenCentral()
}


test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

jar {
    manifest {
        attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Premain-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
      'Agent-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
      'Can-Redefine-Classes':true,
      'Can-Retransform-Classes':true
        )
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Premain-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
      'Agent-Class':'net.odbogm.agent.TransparentDirtyDetectorAgent',
      'Can-Redefine-Classes':true,
      'Can-Retransform-Classes':true
        )
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


// de acuerdo a la guía de 
// http://central.sonatype.org/pages/gradle.html
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    if (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release")) {
        //required { gradle.taskGraph.hasTask("uploadArchives")}

        //    ext."signing.keyId"= credentials.gpgKeyId
        //    ext."signing.password"= credentials.gpgKeyPassword
        //    ext."signing.secretKeyRingFile" = credentials.gpgKeyRingFile                

        //    println ext."signing.keyId"

        sign(configurations.archives)
    }
}




nexusStaging {
    packageGroup = "com.github.mdre" //optional if packageGroup == project.getGroup()
    //    stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}

//sube a nexus
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment) 
            }
            
            repository(url: "$sonatypeURLRelease") {
                authentication(userName: credentials.sonatypeUser, password: credentials.sonatypePassword)
            }
            
            snapshotRepository(url: "$sonatypeURLSnapshot") {
                authentication(userName: credentials.sonatypeUser, password: credentials.sonatypePassword)
            }
            
            pom.groupId = 'com.github.mdre'
            pom.artifactId = 'odbogm-agent'
            
            
            pom.project {
                name 'ODBOGM Class Instrumentation Agent'
                packaging 'jar'
                // optionally artifactId can be defined here 
                description 'ODBOGM Agent instrument class at runtime to detect dirty object.'
                url 'https://github.com/mdre/odbogm-agent'

                scm {
                    connection 'scm:git:git://github.com/mdre/odbogm-agent.git'
                    developerConnection 'scm:git:ssh://github.com/mdre/odbogm-agent.git'
                    url 'https://github.com/mdre/odbogm-agent'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'mdre'
                        name 'Marcelo D. RE'
                        email 'marcelo.re@gmail.com'
                    }
                }
            }
            
        }
    }
}

createReleaseTag.dependsOn ':uploadArchives'

task runFile(dependsOn: 'classes',type:JavaExec) {
    if (project.hasProperty('mainClass')) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardOutput = System.out
        errorOutput = System.err
    }
}


task debug(dependsOn: 'classes',type:JavaExec) {
    if (project.hasProperty('mainClass')) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardOutput = System.out
        errorOutput = System.err
        debug true
    }
}
